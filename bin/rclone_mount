#!/usr/bin/env bash
# Simple rclone mount script for SharePoint

BASE_DIR="$HOME/OST-OneDrive"
CACHE_DIR="$HOME/.cache/rclone"
LOG_DIR="$HOME/.logs/rclone"

# Create directories
mkdir -p "$BASE_DIR" "$CACHE_DIR" "$LOG_DIR"

# Get remotes
mapfile -t REMOTES < <(rclone listremotes | sed 's/:$//')

if [[ ${#REMOTES[@]} -eq 0 ]]; then
  echo "No rclone remotes found. Run 'rclone config' first."
  exit 1
fi

function list_remotes() {
  echo "Available remotes:"
  for i in "${!REMOTES[@]}"; do
    local status=""
    if mountpoint -q "$BASE_DIR/${REMOTES[$i]}" 2>/dev/null; then
      status=" [MOUNTED]"
    fi
    echo "  [$((i + 1))] ${REMOTES[$i]}$status"
  done
}

function choose_remote() {
  list_remotes
  read -p "Select remote number (or Q to quit): " choice
  if [[ "$choice" =~ ^[Qq]$ ]]; then
    return 1
  fi
  if [[ "$choice" =~ ^[0-9]+$ ]] && ((choice >= 1 && choice <= ${#REMOTES[@]})); then
    REMOTE_NAME="${REMOTES[$((choice - 1))]}"
    return 0
  else
    echo "Invalid selection."
    return 1
  fi
}

function mount_remote() {
  local remote_name="$1"
  local target_dir="$BASE_DIR/$remote_name"
  local log_file="$LOG_DIR/rclone_mount_${remote_name}.log"

  if mountpoint -q "$target_dir" 2>/dev/null; then
    echo "Remote '$remote_name' is already mounted"
    return 0
  fi

  mkdir -p "$target_dir"
  echo "Mounting '$remote_name'..."

  rclone mount "$remote_name": "$target_dir" \
    --vfs-cache-mode full \
    --ignore-checksum \
    --ignore-size \
    --log-level ERROR \
    --log-file "$log_file" \
    --daemon

  sleep 2
  if mountpoint -q "$target_dir" 2>/dev/null; then
    echo "Successfully mounted '$remote_name'"
    return 0
  else
    echo "Failed to mount '$remote_name'"
    return 1
  fi
}

function unmount_remote() {
  local remote_name="$1"
  local target_dir="$BASE_DIR/$remote_name"

  if ! mountpoint -q "$target_dir" 2>/dev/null; then
    echo "Remote '$remote_name' is not mounted"
    return 0
  fi

  echo "Unmounting '$remote_name'..."
  if fusermount -u "$target_dir" 2>/dev/null; then
    echo "Successfully unmounted '$remote_name'"
    return 0
  else
    echo "Failed to unmount '$remote_name'"
    return 1
  fi
}

function show_status() {
  echo "Mount Status:"
  for remote_name in "${REMOTES[@]}"; do
    if mountpoint -q "$BASE_DIR/$remote_name" 2>/dev/null; then
      echo "  $remote_name: MOUNTED"
    else
      echo "  $remote_name: NOT MOUNTED"
    fi
  done
}

# Main menu
while true; do
  echo
  echo "=== rclone Mount Manager ==="
  show_status
  echo
  echo "Actions:"
  echo "  [M] Mount a remote"
  echo "  [U] Unmount a remote"
  echo "  [A] Mount all remotes"
  echo "  [X] Unmount all remotes"
  echo "  [Q] Quit"
  echo
  read -p "Choose action: " action

  case "$action" in
  [Mm]*)
    if choose_remote; then
      mount_remote "$REMOTE_NAME"
    fi
    ;;
  [Uu]*)
    if choose_remote; then
      unmount_remote "$REMOTE_NAME"
    fi
    ;;
  [Aa]*)
    echo "Mounting all remotes..."
    for remote in "${REMOTES[@]}"; do
      mount_remote "$remote"
    done
    ;;
  [Xx]*)
    echo "Unmounting all remotes..."
    for remote in "${REMOTES[@]}"; do
      unmount_remote "$remote"
    done
    ;;
  [Qq]*)
    echo "Goodbye!"
    exit 0
    ;;
  *)
    echo "Invalid option."
    ;;
  esac
done
