#  _  | \   / |  Luis Meier
# | | |  \_/  |  https://github.com/luismeier
# | | | |\_/| |  https://luismeier.ch
# | |_|_|_  |_|
# |_______|
#
# ==============================================================================
# ZINIT INITIALIZATION
# ==============================================================================
# Set the directory we want to store zinit and plugins, download if not available
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"
[ ! -d $ZINIT_HOME ] && mkdir -p "$(dirname $ZINIT_HOME)"
[ ! -d $ZINIT_HOME/.git ] && git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"
source "${ZINIT_HOME}/zinit.zsh"

# ==============================================================================
# ZSH PLUGINS
# ==============================================================================
# Syntax highlighting, completions, and suggestions
zinit light zsh-users/zsh-syntax-highlighting
zinit light zsh-users/zsh-completions
zinit light zsh-users/zsh-autosuggestions
zinit light Aloxaf/fzf-tab

# Oh My Zsh plugins
zinit snippet OMZP::command-not-found
zinit snippet OMZP::docker
zinit snippet OMZP::docker-compose
zinit snippet OMZP::sudo

# Starship prompt
zinit ice as"command" from"gh-r" \
          atclone"./starship init zsh > init.zsh; ./starship completions zsh > _starship" \
          atpull"%atclone" src"init.zsh"
zinit light starship/starship

# ==============================================================================
# COMPLETION SYSTEM
# ==============================================================================
autoload -Uz compinit && compinit
autoload -Uz promptinit && promptinit
zinit cdreplay -q  # Replay compdefs from cache

# Completion styling
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'  # Case insensitive
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"  # Colored completions
zstyle ':completion:*' menu no  # Disable default menu (use fzf-tab)
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'ls --color $realpath'
zstyle ':fzf-tab:complete:__zoxide_z:*' fzf-preview 'ls --color $realpath'

# Docker option stacking
zstyle ':completion:*:*:docker:*' option-stacking yes
zstyle ':completion:*:*:docker-*:*' option-stacking yes

# ==============================================================================
# HISTORY CONFIGURATION
# ==============================================================================
export HISTORY_IGNORE="(ls|cd|pwd|exit|sudo reboot|history|cd -|cd ..)"
HISTSIZE=10000
HISTFILE=$HOME/.zsh_history
SAVEHIST=$HISTSIZE
HISTDUP=erase
setopt appendhistory
setopt sharehistory
setopt hist_ignore_space
setopt hist_ignore_all_dups
setopt hist_save_no_dups
setopt hist_find_no_dups

# ==============================================================================
# KEYBINDINGS
# ==============================================================================
# Home, End, Delete
bindkey "^[[H"   beginning-of-line
bindkey "^[[F"   end-of-line
bindkey "^[[3~"  delete-char

# History search
bindkey '^p' history-search-backward
bindkey '^n' history-search-forward

# Autosuggestions
bindkey '^ ' autosuggest-accept  # Ctrl-Space to accept

# ==============================================================================
# FZF INITIALIZATION
# ==============================================================================
if command -v fzf >/dev/null 2>&1; then
  if fzf --help 2>&1 | grep -q -- '--zsh'; then
    eval "$(fzf --zsh)"
  else
    # Legacy fallback
    for f in /usr/share/fzf/shell/{completion,key-bindings}.zsh \
             /usr/share/doc/fzf/examples/{completion,key-bindings}.zsh; do
      [ -f "$f" ] && source "$f"
    done
  fi
fi

# ==============================================================================
# ENVIRONMENT VARIABLES
# ==============================================================================
export EDITOR="nvim"
export VISUAL="nvim"
export MANPAGER="nvim -c 'Man!'"

# PATH configuration
export PATH="$HOME/.local/bin:$HOME/.opencode/bin:$PATH"

# ==============================================================================
# SHELL INTEGRATIONS
# ==============================================================================
# direnv - must be loaded immediately
command -v direnv >/dev/null && eval "$(direnv hook zsh)"

# zoxide - replaces cd, must be loaded immediately
command -v zoxide >/dev/null && eval "$(zoxide init zsh)"

# Lazy load heavy completions for faster startup
lazy_load_completion() {
    local cmd="$1"
    local init_cmd="$2"
    
    if command -v "$cmd" >/dev/null 2>&1; then
        eval "$cmd() {
            unfunction $cmd 2>/dev/null || true
            eval \"$init_cmd\"
            $cmd \"\$@\"
        }"
    fi
}

lazy_load_completion uv 'eval "$(uv generate-shell-completion zsh)"'
lazy_load_completion uvx 'eval "$(uvx --generate-shell-completion zsh)"'


# ==============================================================================
# ALIASES
# ==============================================================================
# Neovim
alias v="nvim"
alias vim="nvim"
alias vk="NVIM_APPNAME=kickstart.nvim nvim"

# Python virtual environment
alias venv="source .venv/bin/activate"

# Better ls with eza/exa
if command -v eza >/dev/null 2>&1; then
  alias ls='eza --icons'
  alias ll='eza -ghl --icons'
  alias la='eza -la --icons'
  alias lf='eza -a --icons'
else
  alias ll='ls -alF --color=auto'
  alias la='ls -A --color=auto'
  alias l='ls -CF --color=auto'
fi

# Navigation
alias ..='cd ..'

# Git
alias gs="git status"
alias gc="git commit"
alias lg="lazygit"

# Colorize and improve defaults
alias grep='grep --color=auto'
alias df="df -h"
alias free="free -m"

# Safety nets
alias cp="cp -i"
alias mv="mv -i"

# Fedora-specific
if [ -f "/etc/fedora-release" ]; then
  alias prime-run="__NV_PRIME_RENDER_OFFLOAD=1 __GLX_VENDOR_LIBRARY_NAME=nvidia"
fi

# ==============================================================================
# CUSTOM CONFIGURATION
# ==============================================================================
export MYZSH=$HOME/dotfiles/zsh/

[ -f $MYZSH/scripts.zsh ] && source $MYZSH/scripts.zsh
